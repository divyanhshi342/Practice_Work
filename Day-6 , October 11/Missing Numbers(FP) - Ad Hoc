/*
Sometimes you need to compare lists of number, but sorting each one normally will take too much time. Instead you can use alternative methods to find the differences
between each list.
Challenge
Numeros The Artist was arranging two identical lists A and B into specific orders. The arrangements of the two arrays were random, Numeros was very proud of his
arrangements. Unfortunately, some numbers got left out of List A. Can you find the missing numbers from A without messing up his order?

Details
There are many duplicates in the lists, but you need to find the extra numbers, i.e. B - A. Print the numbers in numerical order. 
Print each missing number once, even if it is missing multiple times. The numbers are all within a range of 100 from each other.

Input Format
There will be four lines of input:
n - the size of the first list
This is followed by n numbers that makes up the first list.
m - the size of the second list
This is followed by m numbers that makes up the second list.

Output Format
Output all the numbers (in ascending order) that are in B but not in A.
*/

// more easy one
object Solution {

    def main(args: Array[String]) {
        var n = scala.io.StdIn.readInt
        var a = scala.io.StdIn.readLine.split(" ").map(_.toInt)
        var m = scala.io.StdIn.readInt
        var b = scala.io.StdIn.readLine.split(" ").map(_.toInt)
        var mp_a = scala.collection.mutable.Map[Int,Int]()
        var mp_b = scala.collection.mutable.Map[Int,Int]()
        var s:Set[Int] = Set()
        
        for(i<-0 until a.size){
           if(mp_a.contains(a(i))){
              mp_a(a(i))= mp_a(a(i))+ 1
           }else{
              mp_a+=(a(i)->1)
           }
        }
        for(i<-0 until b.size){
           if(mp_b.contains(b(i))){
              mp_b(b(i)) = mp_b(b(i)) + 1
           }else{
              mp_b+=(b(i)->1)
           }
        }
        
        for(i<-mp_b.keys){
           if(!mp_a.contains(i)){
               s+=i
           }else{
              if(mp_a(i)<mp_b(i)){
                 s+=i
              }
           }
        }
        val ss = collection.immutable.SortedSet[Int]() ++ s
        for(i<-ss){
          print(i+" ")
        }
        println
    }
}


/*
import scala.io.StdIn._
import scala.collection.mutable.ArrayBuffer
import scala.collection.immutable.ListMap



object Solution {

    def main(args: Array[String]) {
        var n = readLine.toInt
        var l1 = readLine.split(' ').map(_.toInt).toList
        var m = readLine.toInt
        var l2 = readLine.split(' ').map(_.toInt).toList
        
        
        var m1 = l1.groupBy(l => l).map(t => (t._1, t._2.length)) 
        var m2 = l2.groupBy(l => l).map(t => (t._1, t._2.length))
        
        m1 = ListMap(m1.toSeq.sortBy(_._1):_*)
        m2 = ListMap(m2.toSeq.sortBy(_._1):_*)
        
        var res = new ArrayBuffer[Int]()
        for(i<- m2.keys){
           if(m1.contains(i)==m2.contains(i)){
               if(m1.get(i) != m2.get(i)){
                  res+=i
               }
           }
        }
        for(i<-0 until res.size)
        print(res(i)+" ") 
    }
} */
