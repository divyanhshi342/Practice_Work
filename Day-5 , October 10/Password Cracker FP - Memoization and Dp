/*
There are N users registered on a website CuteKittens.com. Each of them have a unique password represented by pass[1], pass[2], ..., pass[N].
As this a very lovely site, many people want to access those awesomely cute pics of the kittens. But the adamant admin don't want this site to be available for general public.
So only those people with passwords can access it.
Yu being an awesome hacker finds a loophole in their password verification system. A string which is concatenation of one or more passwords, in any order,
is also accepted by the password verification system. Any password can appear 0 or more times in that string. He has access to each of the N passwords, 
and also have a string loginAttempt, he has to tell whether this string be accepted by the password verification system of the website.

Input Format

First line contains an integer T, the total number of test cases. Then T test cases follow.
First line of each test case contains N, the number of users with passwords. Second line contains N space separated strings, pass[1] pass[2] ... pass[N],
representing the passwords of each user. Third line contains a string, loginAttempt, for which Yu has to tell whether it will be accepted or not.

Output Format

For each valid string, Yu has to print the actual order of passwords, separated by space, whose concatenation results into loginAttempt.
If there are multple solutions, print any of them. If loginAttempt can't be accepted by the password verification system, then print WRONG PASSWORD.
*/

import scala.io.StdIn._

object Solution {

    def main(args: Array[String]) {
        var t = readLine.toInt
        for(i<-0 until t){
          var n = readLine.toInt
          var pass = readLine.split(" ")
          var loginAttempt = readLine 
          var res = ""
          var temp = ""
          var flag = -1
          var myMap:Map[String,Int] = Map()
          for(i<-0 until n){
            myMap +=  (pass(i)->i)
          }    
          for(i<-0 until loginAttempt.length){
             temp += loginAttempt(i)
             flag = 0
             if(myMap.contains(temp)){
                res+=temp
                res+=" "
                temp=""
                flag = 1
             }
          }
          if(flag==0){
            println("WRONG PASSWORD")
          }else if(flag==1){
            println(res.trim)
          } 
        }
    }
}
